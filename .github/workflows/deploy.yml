name: Deploy Godot Game to Docker Server

on:
  push:
    branches: [ main, master ]
    paths:
      - 'game/**'
      - 'Dockerfile'
      - 'nginx.conf'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  GAME_NAME: godot-game
  CONTAINER_NAME: godot-game-server

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Validate Godot game files
      run: |
        echo "üéÆ Checking for Godot game files..."
        if [ ! -f "game/index.html" ]; then
          echo "‚ùå Error: game/index.html not found!"
          echo "Please add your Godot export files to the game/ directory"
          exit 1
        fi
        if [ ! -f "game/index.wasm" ]; then
          echo "‚ö†Ô∏è Warning: game/index.wasm not found - Threading may not work!"
        fi
        echo "‚úÖ Game files validated"
        ls -la game/

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        echo "üî® Building Docker image..."
        docker build -t ${{ env.GAME_NAME }}:latest .
        docker save ${{ env.GAME_NAME }}:latest | gzip > game-image.tar.gz
        echo "‚úÖ Docker image built and saved"

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        source: "game-image.tar.gz,docker-compose.production.yml,nginx.conf,traefik.yml"
        target: "~/godot-game-deploy"
        overwrite: true

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd ~/godot-game-deploy
          
          # Load the Docker image
          echo "üì¶ Loading Docker image..."
          docker load < game-image.tar.gz
          
          # Stop existing container if running
          docker-compose -f docker-compose.production.yml down 2>/dev/null || true
          
          # Create required directories
          mkdir -p ssl
          mkdir -p game
          mkdir -p letsencrypt
          
          # Ensure environment variables are set
          if [ ! -f .env ]; then
            echo "DOMAIN=${{ secrets.DOMAIN }}" > .env
            echo "SSL_EMAIL=${{ secrets.SSL_EMAIL }}" >> .env
            echo "GAME_NAME=${{ env.GAME_NAME }}" >> .env
          fi
          
          # Start the containers with Traefik for SSL (required for threading)
          echo "üöÄ Starting containers with SSL support..."
          docker-compose -f docker-compose.production.yml up -d
          
          # Wait for containers to be healthy
          sleep 10
          
          # Check if running
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Game is running at: https://${{ secrets.DOMAIN }}"
            echo "üßµ Threading support: ENABLED (HTTPS active)"
            
            # Test the headers
            echo "üîç Testing COOP/COEP headers..."
            curl -I https://${{ secrets.DOMAIN }} 2>/dev/null | grep -E "Cross-Origin-|Strict-Transport" || true
          else
            echo "‚ùå Deployment failed - container not running"
            docker-compose logs
            exit 1
          fi
          
          # Cleanup
          rm -f game-image.tar.gz
          
          echo "‚ú® Deployment complete with threading support!"

    - name: Health check
      run: |
        echo "üè• Running health check..."
        sleep 15
        
        # Check HTTPS endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DOMAIN }} || echo "000")
        
        if [ "$response" = "200" ] || [ "$response" = "304" ]; then
          echo "‚úÖ Health check passed - Server responding on HTTPS"
          echo "üßµ Threading support is active!"
        else
          echo "‚ö†Ô∏è Server returned status code: $response"
          echo "Check server logs for details"
        fi

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Game URL: https://${{ secrets.DOMAIN }}"
          echo "Test page: https://${{ secrets.DOMAIN }}/test.html"
        else
          echo "‚ùå Deployment failed. Check the logs above."
        fi
